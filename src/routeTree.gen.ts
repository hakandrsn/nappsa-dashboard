/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as DashboardMoviesRouteImport } from './routes/dashboard/movies'
import { Route as DashboardFoodsRouteImport } from './routes/dashboard/foods'
import { Route as DashboardLayoutRouteImport } from './routes/dashboard/_layout'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardMoviesRoute = DashboardMoviesRouteImport.update({
  id: '/movies',
  path: '/movies',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardFoodsRoute = DashboardFoodsRouteImport.update({
  id: '/foods',
  path: '/foods',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardLayoutRoute = DashboardLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => DashboardRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardLayoutRoute
  '/login': typeof LoginRoute
  '/dashboard/foods': typeof DashboardFoodsRoute
  '/dashboard/movies': typeof DashboardMoviesRoute
  '/dashboard/': typeof DashboardIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/dashboard': typeof DashboardIndexRoute
  '/dashboard/foods': typeof DashboardFoodsRoute
  '/dashboard/movies': typeof DashboardMoviesRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/login': typeof LoginRoute
  '/dashboard/_layout': typeof DashboardLayoutRoute
  '/dashboard/foods': typeof DashboardFoodsRoute
  '/dashboard/movies': typeof DashboardMoviesRoute
  '/dashboard/': typeof DashboardIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/login'
    | '/dashboard/foods'
    | '/dashboard/movies'
    | '/dashboard/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/dashboard' | '/dashboard/foods' | '/dashboard/movies'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/login'
    | '/dashboard/_layout'
    | '/dashboard/foods'
    | '/dashboard/movies'
    | '/dashboard/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/movies': {
      id: '/dashboard/movies'
      path: '/movies'
      fullPath: '/dashboard/movies'
      preLoaderRoute: typeof DashboardMoviesRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/foods': {
      id: '/dashboard/foods'
      path: '/foods'
      fullPath: '/dashboard/foods'
      preLoaderRoute: typeof DashboardFoodsRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/_layout': {
      id: '/dashboard/_layout'
      path: ''
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardLayoutRouteImport
      parentRoute: typeof DashboardRoute
    }
  }
}

interface DashboardRouteChildren {
  DashboardLayoutRoute: typeof DashboardLayoutRoute
  DashboardFoodsRoute: typeof DashboardFoodsRoute
  DashboardMoviesRoute: typeof DashboardMoviesRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardLayoutRoute: DashboardLayoutRoute,
  DashboardFoodsRoute: DashboardFoodsRoute,
  DashboardMoviesRoute: DashboardMoviesRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
